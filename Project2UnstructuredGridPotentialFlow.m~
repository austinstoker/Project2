%Fluids Project #2 
% Austin Stoker
% Oct 21 2013
close all
clearvars
clc

%program options
GridStart=1;
GridEnd=6;

GamStart=1;
GamEnd=4;

DoPlots=true;

%geometery and fluid properties
a=1/2;
U=1;

Pinf = 1000;
ro = 1;

syms x y Gam U a;

xfun = @(x,y) x;
psifun = @(x,y) U*(sqrt(x^2+y^2)-((a)^2)/sqrt(x^2+y^2))*y/sqrt(x^2+y^2) + Gam/(2*pi)*log(sqrt(x^2+y^2)/a);

ufun = @(x,y) ((x^2+y^2)^(1/2)-a^2/(x^2+y^2)^(1/2))*U/(x^2+y^2)^(1/2)+y*(1/(x^2+y^2)^(1/2)*y+a^2/(x^2+y^2)^(3/2)*y)*U/(x^2+y^2)^(1/2)-y^2*((x^2+y^2)^(1/2)-a^2/(x^2+y^2)^(1/2))*U/(x^2+y^2)^(3/2)+.1591549431/(x^2+y^2)*y*Gam;
vfun = @(x,y) -y*(1/(x^2+y^2)^(1/2)*x+a^2/(x^2+y^2)^(3/2)*x)*U/(x^2+y^2)^(1/2)+y*((x^2+y^2)^(1/2)-a^2/(x^2+y^2)^(1/2))*U/(x^2+y^2)^(3/2)*x-.1591549431/(x^2+y^2)*x*Gam;

char(diff(ufun(x,y),x)) %dudx
char(diff(vfun(x,y),x)) %dvdx
char(diff(ufun(x,y),y)) %dudy
char(diff(vfun(x,y),y)) %dvdy

dudxA_fun = @(x,y) U*(1.000000000/(x^2+y^2)^.5000000000*x+1.000000000*a^2/(x^2+y^2)^1.500000000*x)/(x^2+y^2)^.500000000000000000-1.000000000*U*((x^2+y^2)^.500000000000000000-a^2/(x^2+y^2)^.500000000000000000)/(x^2+y^2)^1.500000000*x+U*(-1.000000000*y/(x^2+y^2)^1.500000000*x-3.000000000*y*a^2/(x^2+y^2)^2.500000000*x)*y/(x^2+y^2)^.500000000000000000-1.000000000*U*(y/(x^2+y^2)^.500000000000000000+y*a^2/(x^2+y^2)^1.50000000000000000)*y/(x^2+y^2)^1.500000000*x-U*(1.000000000/(x^2+y^2)^.5000000000*x+1.000000000*a^2/(x^2+y^2)^1.500000000*x)*y^2/(x^2+y^2)^1.50000000000000000+3.000000000*U*((x^2+y^2)^.500000000000000000-a^2/(x^2+y^2)^.500000000000000000)*y^2/(x^2+y^2)^2.500000000*x-.3183098862/(x^2+y^2)^2*y*Gam*x;
dvdxA_fun = @(x,y) -U*(1/(x^2+y^2)^.500000000000000000-1.000000000*x^2/(x^2+y^2)^1.500000000+a^2/(x^2+y^2)^1.50000000000000000-3.000000000*x^2*a^2/(x^2+y^2)^2.500000000)*y/(x^2+y^2)^.500000000000000000+1.000000000*U*(x/(x^2+y^2)^.500000000000000000+x*a^2/(x^2+y^2)^1.50000000000000000)*y/(x^2+y^2)^1.500000000*x+U*((x^2+y^2)^.500000000000000000-a^2/(x^2+y^2)^.500000000000000000)*y/(x^2+y^2)^1.50000000000000000+x*U*(1.000000000/(x^2+y^2)^.5000000000*x+1.000000000*a^2/(x^2+y^2)^1.500000000*x)*y/(x^2+y^2)^1.50000000000000000-3.000000000*x^2*U*((x^2+y^2)^.500000000000000000-a^2/(x^2+y^2)^.500000000000000000)*y/(x^2+y^2)^2.500000000+.3183098862/(x^2+y^2)^2*x^2*Gam-.159154943100000002/(x^2+y^2)*Gam;
dudyA_fun = @(x,y) U*(1.000000000/(x^2+y^2)^.5000000000*y+1.000000000*a^2/(x^2+y^2)^1.500000000*y)/(x^2+y^2)^.500000000000000000-1.000000000*U*((x^2+y^2)^.500000000000000000-a^2/(x^2+y^2)^.500000000000000000)/(x^2+y^2)^1.500000000*y+U*(1/(x^2+y^2)^.500000000000000000-1.000000000*y^2/(x^2+y^2)^1.500000000+a^2/(x^2+y^2)^1.50000000000000000-3.000000000*y^2*a^2/(x^2+y^2)^2.500000000)*y/(x^2+y^2)^.500000000000000000+U*(y/(x^2+y^2)^.500000000000000000+y*a^2/(x^2+y^2)^1.50000000000000000)/(x^2+y^2)^.500000000000000000-1.000000000*U*(y/(x^2+y^2)^.500000000000000000+y*a^2/(x^2+y^2)^1.50000000000000000)*y^2/(x^2+y^2)^1.500000000-U*(1.000000000/(x^2+y^2)^.5000000000*y+1.000000000*a^2/(x^2+y^2)^1.500000000*y)*y^2/(x^2+y^2)^1.50000000000000000-2*U*((x^2+y^2)^.500000000000000000-a^2/(x^2+y^2)^.500000000000000000)*y/(x^2+y^2)^1.50000000000000000+3.000000000*U*((x^2+y^2)^.500000000000000000-a^2/(x^2+y^2)^.500000000000000000)*y^3/(x^2+y^2)^2.500000000-.3183098862/(x^2+y^2)^2*y^2*Gam+.159154943100000002/(x^2+y^2)*Gam;
dvdyA_fun = @(x,y) -(-1.000000000*y/(x^2+y^2)^1.500000000*x-.7500000000*y/(x^2+y^2)^2.500000000*x)*y/(x^2+y^2)^.500000000000000000-(x/(x^2+y^2)^.500000000000000000+.250000000000000000*x/(x^2+y^2)^1.50000000000000000)/(x^2+y^2)^.500000000000000000+1.000000000*(x/(x^2+y^2)^.500000000000000000+.250000000000000000*x/(x^2+y^2)^1.50000000000000000)*y^2/(x^2+y^2)^1.500000000+x*(1.000000000/(x^2+y^2)^.5000000000*y+.2500000000/(x^2+y^2)^1.500000000*y)*y/(x^2+y^2)^1.50000000000000000+x*((x^2+y^2)^.500000000000000000-.250000000000000000/(x^2+y^2)^.500000000000000000)/(x^2+y^2)^1.50000000000000000-3.000000000*((x^2+y^2)^.500000000000000000-.250000000000000000/(x^2+y^2)^.500000000000000000)*y^2/(x^2+y^2)^2.500000000*x+2/(x^2+y^2)^2*y*x;

Gam_hats = [0,.5,1,2];
for j=GamStart:GamEnd
    Gam_hat=Gam_hats(j);
    Gam = (Gam_hat)*2*pi; 
    
    mesh  = [16,32,64,128,256,512];
    for k=GridStart:GridEnd
        tic
        %load the grid indicated by mycase
    %     if k==1 
    %         load circle16Edges.mat
    %         load circle16PointCoords.mat
    %         pointCoords=circle16PointCoords;
    %         edges = circle16Edges;
    %     elseif k==2
    %         load circle32Edges.mat
    %         load circle32PointCoords.mat
    %         pointCoords=circle32PointCoords;
    %         edges = circle32Edges;
    %     elseif k==3
    %         load circle64Edges.mat
    %         load circle64PointCoords.mat
    %         pointCoords=circle64PointCoords;
    %         edges = circle64Edges;
    %     elseif k==4
    %         load circle128Edges.mat
    %         load circle128PointCoords.mat
    %         pointCoords=circle128PointCoords;
    %         edges = circle128Edges;
    %     elseif k==5
    %         load circle256Edges.mat
    %         load circle256PointCoords.mat
    %         pointCoords=circle256PointCoords;
    %         edges = circle256Edges;
    %     elseif k==6
    %         load circle512Edges.mat
    %         load circle512PointCoords.mat
    %         pointCoords=circle512PointCoords;
    %         edges = circle512Edges;
    %     end


        file_to_open = ['circle',num2str(mesh(k)),'.dat'];
        fid = fopen(file_to_open,'r');
        DATA = str2num(fgetl(fid));
        NN = DATA(1); NE = DATA(2); NBE = DATA(3);

        pointCoords = zeros(NN,2); edges = zeros(NE,5);
        for n = 1:NN
            pointCoords(n,:) = str2num(fgetl(fid));
        end

        for e = 1:NE
            edges(e,:) = str2num(fgetl(fid));
        end
        fclose all;

        numPoints=size(pointCoords,1);
        numCells=size(edges,1);

        %find the volume of each super cell around each node
        V0 = get_dfdx_hat(pointCoords,edges,xfun);

        totalV(k) = sum(V0)/3;

        %preform all the differentiations needed for vorticity and velocity
        %divergence
        dudx = get_dfdx_hat(pointCoords,edges,ufun)./V0;
        dvdx = get_dfdx_hat(pointCoords,edges,vfun)./V0;
        dudy = -1*get_dfdy_hat(pointCoords,edges,ufun)./V0;
        dvdy = -1*get_dfdy_hat(pointCoords,edges,vfun)./V0;

        %assemble vorticity and velocity divergence
        vorticity = dvdx-dudy;
        vel_divergence = dudx+dvdy;

        %populate u and v based on the analytic solution
        u=zeros(numPoints,1);
        v=zeros(numPoints,1);
        for i=1:numPoints
            u(i)=ufun(pointCoords(i,1),pointCoords(i,2));
            v(i)=vfun(pointCoords(i,1),pointCoords(i,2));
        end

        %Calculate the pressure at all nodes
        P = Pinf+(1/2)*ro*(U^2)- (1/2)*ro*(u.^2+v.^2);

        %Plot the velocity field if desired
        if DoPlots
            figure(k);
            quiver(pointCoords(:,1),pointCoords(:,2),u/30,v/30,'autoscale','off');
            xlim([-1 1]);
            ylim([-1 1]);
        end

        %Calculate the forces acting on the cylinder at each edge segment
        j=1;
        tauij=zeros(numCells,2);
        for i=1:numCells-1
            if edges(i,5)==1 % is a cylinder boundary
                n1 = edges(i,1);
                n2 = edges(i,2);
                x1 = pointCoords(n1,1);
                y1 = pointCoords(n1,2);
                x2 = pointCoords(n2,1);
                y2 = pointCoords(n2,2);

                %create a scaled normal vector
                ds = [(y2-y1) -(x2-x1)]; %x and y are swapped because dy creates force in the x direction
                cylP(j,:) = ((P(n1)+P(n2))/2*ds); %avgP*normalvect
                j = j+1;
            end
        end

        %sum the forces around the edge to get lift and drag
        Drag(k) = sum(cylP(:,1));
        Lift(k) = sum(cylP(:,2)); %Uhh not sure how to justify the *2 but it works

        %the analytic solutions for Lift and drag on a potential flow rotating
        %cylinder
        DragAnalytic(k) = 0;
        LiftAnalytic(k) = ro*U*Gam;

        %evaluate analytic solutions for vorticity and vel_div at each point
        vorticityA=zeros(numPoints,1);
        vel_divergenceA=zeros(numPoints,1);
        for i=1:numPoints
            x1 = pointCoords(i,1);
            y1 = pointCoords(i,2);
            vorticityA(i) = dvdxA_fun(x1,y1)-dudyA_fun(x1,y1);
            vel_divergenceA(i) = dudxA_fun(x1,y1)+dvdyA_fun(x1,y1);
        end


        % Error analysis

        E_rms_vorticity(k) = sqrt(sum((vorticity-vorticityA).^2)/numPoints);
        E_rms_vel_divergence(k) = sqrt(sum((vel_divergence-vel_divergenceA).^2)/numPoints);
        time(k)=toc;
    end
end
figure(k+1)
plot(E_rms_vorticity);